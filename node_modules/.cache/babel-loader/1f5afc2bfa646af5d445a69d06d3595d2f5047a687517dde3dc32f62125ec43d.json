{"ast":null,"code":"import React from\"react\";import{useNavigate,useParams}from\"react-router-dom\";import styled from\"styled-components\";import CommentList from\"../List/CommentList\";import TextInput from\"../UI/TextInput\";import Button from\"../UI/Button\";import{data}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Wrapper=styled.div`\n  padding: 16px;\n  width: calc(100% - 32px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n`;const Container=styled.div`\n    width: 100%;\n    max-width: 720px;\n    & > * {\n        :not(:last-child) {\n            margin-bottom: 16px;\n        }\n    }\n`;const PostContainer=styled.div`\n    padding: 8px 16px;\n    border: 1px solid grey;\n    border-radius: 8px;\n`;const TitleText=styled.h2`\n  font-size: 28px;\n  font-weight: 500;\n`;const ContentText=styled.p`\n    font-size: 20px;\n    line-height: 32px;\n    white-space: pre-wrap;\n`;const CommentLabel=styled.p`\n    font-size: 16px;\n    font-weight: 500;\n`;// postViewPage 컴포넌트에서는 먼저 프롭스로 전달받은 글의 ID를 이용해서 전체 데이터에서 해당하는 글을 찾음\n// 그리고 찾은 글의 제목, 내용, 댓글을 렌더링하게 되고 그 아래에는 TextInput 컴포넌트와 Button 컴포넌트를 이용해 댓글을 작성할 수 있도록 UI 제공\nfunction PostViewPage(props){const navigate=useNavigate();const{postId}=useParams();const post=data.find(item=>{return item.id==postId;});const[comment,setComment]=useState(\"\");return/*#__PURE__*/_jsx(Wrapper,{children:/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Button,{title:\"\\uB4A4\\uB85C \\uAC00\\uAE30\",onClick:()=>{navigate(\"/\");}}),/*#__PURE__*/_jsxs(PostContainer,{children:[/*#__PURE__*/_jsx(TitleText,{children:post.title}),/*#__PURE__*/_jsx(ContentText,{children:post.content})]}),/*#__PURE__*/_jsx(CommentLabel,{children:\"\\uB313\\uAE00\"}),/*#__PURE__*/_jsx(CommentList,{comments:post.comments}),/*#__PURE__*/_jsx(TextInput,{height:40,value:commnet,onChange:event=>{setComment(event.target.value);}}),/*#__PURE__*/_jsx(Button,{title:\"\\uB313\\uAE00 \\uC791\\uC131\\uD558\\uAE30\",onClick:()=>{navigate(\"/\");}})]})});}export default PostViewPage;","map":{"version":3,"names":["React","useNavigate","useParams","styled","CommentList","TextInput","Button","data","jsx","_jsx","jsxs","_jsxs","Wrapper","div","Container","PostContainer","TitleText","h2","ContentText","p","CommentLabel","PostViewPage","props","navigate","postId","post","find","item","id","comment","setComment","useState","children","title","onClick","content","comments","height","value","commnet","onChange","event","target"],"sources":["/Users/yunseungji/Desktop/MiniBlog/mini-blog/src/components/pages/PostViewPage.jsx"],"sourcesContent":["import React from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport CommentList from \"../List/CommentList\";\nimport TextInput from \"../UI/TextInput\";\nimport Button from \"../UI/Button\";\nimport { data } from \"react-router-dom\";\n\nconst Wrapper = styled.div`\n  padding: 16px;\n  width: calc(100% - 32px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\n    width: 100%;\n    max-width: 720px;\n    & > * {\n        :not(:last-child) {\n            margin-bottom: 16px;\n        }\n    }\n`;\n\nconst PostContainer = styled.div`\n    padding: 8px 16px;\n    border: 1px solid grey;\n    border-radius: 8px;\n`;\n\nconst TitleText = styled.h2`\n  font-size: 28px;\n  font-weight: 500;\n`;\n\nconst ContentText = styled.p`\n    font-size: 20px;\n    line-height: 32px;\n    white-space: pre-wrap;\n`;\n\nconst CommentLabel = styled.p`\n    font-size: 16px;\n    font-weight: 500;\n`;\n\n// postViewPage 컴포넌트에서는 먼저 프롭스로 전달받은 글의 ID를 이용해서 전체 데이터에서 해당하는 글을 찾음\n// 그리고 찾은 글의 제목, 내용, 댓글을 렌더링하게 되고 그 아래에는 TextInput 컴포넌트와 Button 컴포넌트를 이용해 댓글을 작성할 수 있도록 UI 제공\nfunction PostViewPage(props) {\n    const navigate = useNavigate();\n    const {postId} = useParams();\n\n    const post = data.find((item) => {\n        return item.id == postId;\n    });\n\n    const [comment, setComment] = useState(\"\");\n\n    return (\n        <Wrapper>\n            <Container>\n                <Button\n                    title=\"뒤로 가기\"\n                    onClick={() => {\n                        navigate(\"/\");\n                    }}\n                />\n\n                <PostContainer>\n                    <TitleText>{post.title}</TitleText>\n                    <ContentText>{post.content}</ContentText>\n                </PostContainer>\n\n                <CommentLabel>댓글</CommentLabel>\n                <CommentList comments={post.comments} />\n\n                <TextInput\n                    height={40}\n                    value={commnet}\n                    onChange={(event) => {\n                        setComment(event.target.value);\n                    }}\n                />\n\n                <Button\n                    title=\"댓글 작성하기\"\n                    onClick={() => {\n                        navigate(\"/\")\n                    }}\n                />\n            </Container>\n        </Wrapper>\n    );\n}\n\nexport default PostViewPage;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,WAAW,CAAEC,SAAS,KAAQ,kBAAkB,CACzD,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,WAAW,KAAM,qBAAqB,CAC7C,MAAO,CAAAC,SAAS,KAAM,iBAAiB,CACvC,MAAO,CAAAC,MAAM,KAAM,cAAc,CACjC,OAASC,IAAI,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExC,KAAM,CAAAC,OAAO,CAAGT,MAAM,CAACU,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGX,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAE,aAAa,CAAGZ,MAAM,CAACU,GAAG;AAChC;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAG,SAAS,CAAGb,MAAM,CAACc,EAAE;AAC3B;AACA;AACA,CAAC,CAED,KAAM,CAAAC,WAAW,CAAGf,MAAM,CAACgB,CAAC;AAC5B;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGjB,MAAM,CAACgB,CAAC;AAC7B;AACA;AACA,CAAC,CAED;AACA;AACA,QAAS,CAAAE,YAAYA,CAACC,KAAK,CAAE,CACzB,KAAM,CAAAC,QAAQ,CAAGtB,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACuB,MAAM,CAAC,CAAGtB,SAAS,CAAC,CAAC,CAE5B,KAAM,CAAAuB,IAAI,CAAGlB,IAAI,CAACmB,IAAI,CAAEC,IAAI,EAAK,CAC7B,MAAO,CAAAA,IAAI,CAACC,EAAE,EAAIJ,MAAM,CAC5B,CAAC,CAAC,CAEF,KAAM,CAACK,OAAO,CAAEC,UAAU,CAAC,CAAGC,QAAQ,CAAC,EAAE,CAAC,CAE1C,mBACItB,IAAA,CAACG,OAAO,EAAAoB,QAAA,cACJrB,KAAA,CAACG,SAAS,EAAAkB,QAAA,eACNvB,IAAA,CAACH,MAAM,EACH2B,KAAK,CAAC,2BAAO,CACbC,OAAO,CAAEA,CAAA,GAAM,CACXX,QAAQ,CAAC,GAAG,CAAC,CACjB,CAAE,CACL,CAAC,cAEFZ,KAAA,CAACI,aAAa,EAAAiB,QAAA,eACVvB,IAAA,CAACO,SAAS,EAAAgB,QAAA,CAAEP,IAAI,CAACQ,KAAK,CAAY,CAAC,cACnCxB,IAAA,CAACS,WAAW,EAAAc,QAAA,CAAEP,IAAI,CAACU,OAAO,CAAc,CAAC,EAC9B,CAAC,cAEhB1B,IAAA,CAACW,YAAY,EAAAY,QAAA,CAAC,cAAE,CAAc,CAAC,cAC/BvB,IAAA,CAACL,WAAW,EAACgC,QAAQ,CAAEX,IAAI,CAACW,QAAS,CAAE,CAAC,cAExC3B,IAAA,CAACJ,SAAS,EACNgC,MAAM,CAAE,EAAG,CACXC,KAAK,CAAEC,OAAQ,CACfC,QAAQ,CAAGC,KAAK,EAAK,CACjBX,UAAU,CAACW,KAAK,CAACC,MAAM,CAACJ,KAAK,CAAC,CAClC,CAAE,CACL,CAAC,cAEF7B,IAAA,CAACH,MAAM,EACH2B,KAAK,CAAC,uCAAS,CACfC,OAAO,CAAEA,CAAA,GAAM,CACXX,QAAQ,CAAC,GAAG,CAAC,CACjB,CAAE,CACL,CAAC,EACK,CAAC,CACP,CAAC,CAElB,CAEA,cAAe,CAAAF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}