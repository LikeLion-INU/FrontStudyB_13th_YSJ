{"ast":null,"code":"var _jsxFileName = \"/Users/yunseungji/Desktop/MiniBlog/mini-blog/src/components/pages/MainPage.jsx\",\n  _s = $RefreshSig$();\n// 글 목록 보기, 글 작성 페이지 이동\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport PostList from \"../List/PostList\";\nimport Button from \"../UI/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n_c = Wrapper;\nconst Container = styled.div`\n  width: 100%;\n  max-width: 720px;\n`;\n_c2 = Container;\nconst Title = styled.h2`\n  font-size: 28px;\n  font-weight: bold;\n  color: skyblue;\n  border-bottom: 2px solid skyblue;\n  padding-bottom: 8px;\n  margin-bottom: 20px;\n  text-align: left;      /* 왼쪽 정렬 */\n  padding-left: 20px;    /* 왼쪽 여백 */\n`;\n\n// 페이지 이동을 위해 리액트 라우터 돔에 useNavigate 훅 사용\n// mainpage 컴포넌트의 구조는 기존에 만들어 두었던 컴포넌트들을 모아놓은 수준으로 굉장히 단순한데, 이것이 바로 컴포넌트 기반으로 개발하는 리액트의 장점\n_c3 = Title;\nfunction MainPage({\n  posts\n}) {\n  _s();\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"\\uAE00 \\uBAA9\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        title: \"\\uAE00 \\uC791\\uC131\\uD558\\uAE30\",\n        onClick: () => navigate(\"/post-write\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostList, {\n        posts: posts,\n        onClickItem: post => navigate(`/post/${post.id}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c4 = MainPage;\nexport default MainPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Title\");\n$RefreshReg$(_c4, \"MainPage\");","map":{"version":3,"names":["React","useNavigate","styled","PostList","Button","jsxDEV","_jsxDEV","Wrapper","div","_c","Container","_c2","Title","h2","_c3","MainPage","posts","_s","navigate","children","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","onClickItem","post","id","_c4","$RefreshReg$"],"sources":["/Users/yunseungji/Desktop/MiniBlog/mini-blog/src/components/pages/MainPage.jsx"],"sourcesContent":["// 글 목록 보기, 글 작성 페이지 이동\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport PostList from \"../List/PostList\";\nimport Button from \"../UI/Button\";\n\nconst Wrapper = styled.div`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 720px;\n`;\n\nconst Title = styled.h2`\n  font-size: 28px;\n  font-weight: bold;\n  color: skyblue;\n  border-bottom: 2px solid skyblue;\n  padding-bottom: 8px;\n  margin-bottom: 20px;\n  text-align: left;      /* 왼쪽 정렬 */\n  padding-left: 20px;    /* 왼쪽 여백 */\n`;\n\n// 페이지 이동을 위해 리액트 라우터 돔에 useNavigate 훅 사용\n// mainpage 컴포넌트의 구조는 기존에 만들어 두었던 컴포넌트들을 모아놓은 수준으로 굉장히 단순한데, 이것이 바로 컴포넌트 기반으로 개발하는 리액트의 장점\nfunction MainPage({ posts }) {\n  const navigate = useNavigate();\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title>글 목록</Title>\n        <Button\n          title=\"글 작성하기\"\n          onClick={() => navigate(\"/post-write\")}\n        />\n        <PostList\n          posts={posts}\n          onClickItem={(post) => navigate(`/post/${post.id}`)}\n        />\n      </Container>\n    </Wrapper>\n  );\n}\n\nexport default MainPage;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,OAAO,GAAGL,MAAM,CAACM,GAAG;AAC1B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,OAAO;AAOb,MAAMG,SAAS,GAAGR,MAAM,CAACM,GAAG;AAC5B;AACA;AACA,CAAC;AAACG,GAAA,GAHID,SAAS;AAKf,MAAME,KAAK,GAAGV,MAAM,CAACW,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AAAAC,GAAA,GAZMF,KAAK;AAaX,SAASG,QAAQA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9B,oBACEK,OAAA,CAACC,OAAO;IAAAY,QAAA,eACNb,OAAA,CAACI,SAAS;MAAAS,QAAA,gBACRb,OAAA,CAACM,KAAK;QAAAO,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnBjB,OAAA,CAACF,MAAM;QACLoB,KAAK,EAAC,iCAAQ;QACdC,OAAO,EAAEA,CAAA,KAAMP,QAAQ,CAAC,aAAa;MAAE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACFjB,OAAA,CAACH,QAAQ;QACPa,KAAK,EAAEA,KAAM;QACbU,WAAW,EAAGC,IAAI,IAAKT,QAAQ,CAAC,SAASS,IAAI,CAACC,EAAE,EAAE;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACN,EAAA,CAlBQF,QAAQ;EAAA,QACEd,WAAW;AAAA;AAAA4B,GAAA,GADrBd,QAAQ;AAoBjB,eAAeA,QAAQ;AAAC,IAAAN,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAe,GAAA;AAAAC,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAnB,GAAA;AAAAmB,YAAA,CAAAhB,GAAA;AAAAgB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}